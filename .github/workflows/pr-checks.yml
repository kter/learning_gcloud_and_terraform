name: PR Checks

on:
  pull_request:
    branches:
      - main
      - develop

jobs:
  summary:
    name: Check Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [terraform-checks, python-checks]

    steps:
      - name: Check results
        run: |
          echo "Terraform checks: ${{ needs.terraform-checks.result }}"
          echo "Python checks: ${{ needs.python-checks.result }}"
          if [ "${{ needs.terraform-checks.result }}" != "success" ] || [ "${{ needs.python-checks.result }}" != "success" ]; then
            echo "❌ Some checks failed"
            exit 1
          fi
          echo "✅ All checks passed"

  terraform-checks:
    name: Terraform Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Initialize TFLint
        run: tflint --init

      - name: Run TFLint
        run: |
          set -e
          for dir in modules/*/ env/dev/*/; do
            if [ -f "$dir/main.tf" ]; then
              echo "Linting $dir"
              (cd "$dir" && tflint --format compact)
            fi
          done

      - name: Fail if format check failed
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "❌ Terraform format check failed. Run: terraform fmt -recursive"
          exit 1

  python-checks:
    name: Python Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run Black
        run: black --check app/app/ || echo "::warning::Black formatting issues found"

      - name: Run isort
        run: isort --check-only app/app/ || echo "::warning::Import sorting issues found"

      - name: Run Flake8
        run: flake8 app/app/ --max-line-length=88 --extend-ignore=E501,W503
